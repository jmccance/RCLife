#!/usr/bin/env ruby
require 'curses'
require 'rclife'

# View Model ##########################

class Cursor

  attr_accessor :row, :col

  def initialize(row = 0, col = 0)
    @row = row
    @col = col
  end

  def draw
    Curses.setpos(@row, @col)
  end

  def move_left   
    @col -= 1 if @col > 0
  end
  
  def move_right
    @col += 1 if @col + 1 < Curses.cols
  end
  
  def move_up 
    @row -= 1 if @row > 0
  end

  def move_down
    @row += 1 if @row + 1 < Curses.lines
  end

end

# Main ################################

def init_screen
  Curses.noecho
  Curses.init_screen
  Curses.stdscr.keypad(true)
  Curses.timeout = 0

  begin
    yield
  rescue Interrupt
    # Prevent ^C from causing an ugly stack-trace
  ensure
    Curses.close_screen
  end
end

init_screen do
  include RCLife

  # Set-up view model
  cursor = Cursor.new
  state_map = { :live => ?#, :dead => ' ', nil => ?! }
  is_running = false

  # Initialize model
  grid = Grid.new(Curses.lines, Curses.cols)

  loop do
    grid.step if is_running

    grid.height.times do |i|
      grid.width.times do |j|
        Curses.setpos(i, j)
        Curses.addch(state_map[grid[i, j]])
      end
    end
    cursor.draw
    Curses.refresh

    ch = Curses.getch
    case ch
      # Cursor movement
    when Curses::Key::LEFT  then cursor.move_left
    when Curses::Key::RIGHT then cursor.move_right
    when Curses::Key::UP    then cursor.move_up
    when Curses::Key::DOWN  then cursor.move_down
      # Toggle cell
    when ?x, ?X then grid.toggle(cursor.row, cursor.col)
      # Step simulation
    when ' ' then grid.step
      # Reset grid
    when ?c, ?C then grid = Grid.new(Curses.lines, Curses.cols)
      # Toggle auto-run
    when ?p, ?P then is_running ^= true
      # Quit
    when ?q then break
    end
  end
end
